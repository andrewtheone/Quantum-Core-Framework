<?phpclass Mysql2_driver implements dbDriverInterface{        var $connection;    var $prefix;    var $table;    var $temporaly_prefix = NULL;    var $temporaly_table = NULL;        var $select = array();    var $where = array();    var $order_by = '';    var $group_by = '';    var $limit;    var $joins = array();        /*    * @param database config object    * @return resource connection    */    public static function connect( $config )        {        return new Mysqli( $config->host.(isset($config->port)?":".$config->port:""), $config->username, $config->password, $config->database);        }        /*    * @param resource connection    * @param string table's prefix    * @param string table    * @return bool    */    public function __construct( $connection, $prefix, $table )        {        $this->connection = $connection;        $this->prefix = $prefix;        $this->table = $table;        return $this;        }        /*    * @param string prefix, lasts for the next function call    * @return -    */    public function usePrefix( $temporaly_prefix )        {        $this->temporaly_prefix = $temporaly_prefix;        return $this;        }            public function useTable( $temporaly_table )        {        $this->temporaly_table = $temporaly_table;        return $this;        }        /*    * @param array/null tables to export    * @param string path to export    * @return bool    */    public function export( $tables = NULL, $path = '/' ){}        /*    * @return object query    */    public function getFields()        {        return $this->exQuery("SHOW COLUMNS FROM `".$this->getPrefix().$this->getTable()."`");        }        /*    * @param string query string    * @return object query    */    public function exQuery( $query )        {        //echo $query."<br>";        return new Mysql2_query($this->connection->query( $query ), $this->getTable());        }        /*    * @variation 1    *  @params null OR function hasn't called select all fields    * @variation 2    *  @params string field, string field, string field, ...    * @variation 3    *  @params array Array('field_name' => 'field_alias', ... )    * @return object this    */    public function select( /**/ )        {        $args = func_get_args();        if( is_array($args[0]) && count($args) == 1 )            {            foreach( $args[0] as $field_name => $field_alias )                $this->select[] = array('field_name' => '`'.$this->getPrefix().$this->getTable().'`.`'.$field_name.'`',                                        'alias' => '`'.$field_alias.'`');            $this->temporaly_prefix = $this->temporaly_table = NULL;            return $this;            }        if( !is_array($args[0]) && count($args) > 0 )            {            foreach( $args as $field_name )                if( $field_name == '*' )                    $this->select[] = array('field_name' => '*', 'alias' => '*');                else                    $this->select[] = array('field_name' => '`'.$this->getPrefix().$this->getTable().'`.`'.$field_name.'`',                                            'alias' => '`'.$field_name.'`');            $this->temporaly_prefix = $this->temporaly_table = NULL;            return $this;            }        }        /*    * @variation 1    *  @params null OR function hasn't called no where clause    * @variation 2    *  @params string field, string value, ...    *   @example where('username', 'test', 'ip', 'localhost') => where username='test' AND ip='localhost'    *   @example where('username', 'test', '!ip', 'localhost') => where username='test' OR ip='localhost'    *   @example where('username', 'test', 'ip!', 'localhost') => where username='test' AND ip!='localhost'    *   @example where('username', 'test', 'id<', 2) => where username='test' AND id<2    *   @example where('username', 'test', '!id>=', 2) => where username='test' OR id>=2    * @variation 3    *  @params array Array( 0 => Array('field' => 'username', 'operator' => '[default: = ]', 'value' => 'test', 'join' => 'AND/OR'), 1=> ..., ... )    *   @example where( array( array('field' => 'username', 'operator' => '!=', 'value' => 'test'), array('field' => 'ip', 'operator' => '=', 'value' => 'localhost', 'join' => 'AND')))    *      => where username!=test AND ip!=localhost    * @return object this    */    public function where( /**/ )        {        $args = func_get_args();        if( is_string($args[0]) && count($args) > 1 )            {            $operators = array('>', '<', '=', '!');            for( $i=0;$i<count($args);$i++ )                {                $before_tag = ($i>0 || count($this->where)?'AND':'');                $operator = '=';                $field_name = $args[$i];                $value = $args[$i+1];                if( $field_name[0] == '!' )                    {                    $before_tag = 'OR';                    $field_name = substr($field_name, 1);                    }                $e = 0;                while( in_array($field_name[ strlen($field_name)-1 ], $operators) )                    {                    if( $e == 0 ) $operator = '';                    $operator = substr($field_name, -1).$operator;                    $field_name = substr($field_name, 0, -1);                    $e++;                    }                $this->where[] = array('field_name' => '`'.$this->getPrefix().$this->getTable().'`.`'.$field_name.'`',                                       'before_tag' => $before_tag,                                       'operator' => $operator,                                       'value' => (is_numeric($value)?(int)$value:"'".$value."'"));                $i++;                }                $this->temporaly_prefix = $this->temporaly_table = NULL;                return $this;            }        if( is_array($args[0]) )            {            if( count($args) == 1 && array_key_exists(0, $args[0]) )                {                foreach( $args[0] as $where )                    $this->where[] = array('field_name' => '`'.$this->getPrefix().$this->getTable().'`.`'.$where['field'].'`',                                           'before_tag' => (isset($where['join'])?$where['join']:'AND'),                                           'operator' => $where['operator'],                                           'value' => (is_numeric($where['value'])?(int)$where['value']:"'".$where['value']."'"));                    $this->temporaly_prefix = $this->temporaly_table = NULL;                    return $this;                }            if( count($args) > 0 && array_key_exists('field', $args[0]) )                {                foreach( $args as $where )                    $this->where[] = array('field_name' => '`'.$this->getPrefix().$this->getTable().'`.`'.$where['field'].'`',                                           'before_tag' => (isset($where['join'])?$where['join']:'AND'),                                           'operator' => $where['operator'],                                           'value' => (is_numeric($where['value'])?(int)$where['value']:"'".$where['value']."'"));                    $this->temporaly_prefix = $this->temporaly_table = NULL;                    return $this;                }            if( count($args) == 1 && is_array($args[0]) )                {                foreach( $args[0] as $field_name => $value )                    {                    $pref = $this->getPrefix();                    $this->where($field_name, $value);                    $this->usePrefix($pref);                    }                $this->temporaly_prefix = $this->temporaly_table = NULL;                return $this;                }            }        }        /*    * @param string    * @param string ASC/DESC    * @return object this    */    public function orderBy( $field, $order = 'ASC' )        {        $this->order_by = " ORDER BY `".$this->getPrefix().$this->getTable()."`.`".$field."` ".$order;        $this->temopraly_prefix = NULL;        return $this;        }        /*    * @param string    * @return object this    */    public function groupBy( $field )        {        $this->group_by = " GROUP BY `".$this->getPrefix().$this->getTable()."`.`".$field."`";        $this->temporaly_prefix = $this->temporaly_table = NULL;        return $this;        }        /*    * @param int    * @param int    * @return object this    */    public function limit( $offset, $limit )        {        $this->limit = " LIMIT ".$offset.",".$limit;        return $this;        }        /*    * @param string    * @param string    * @param string    * @return object this    */    public function leftJoin( $foreign_table, $foreign_primary, $primary )        {        $this->joins['left'][] = array('foreign_table' => "`".$this->getPrefix().$foreign_table."`",                                       'foreign_primary' => "`".$this->getPrefix().$foreign_table."`.`".$foreign_primary."`",                                       'primary' => "`".$this->getPrefix().$this->getTable()."`.`".$primary."`");        $this->temporaly_prefix = $this->temporaly_table = NULL;        return $this;        }        /*    * @param string    * @param string    * @param string    * @return object this    */    public function rightJoin( $foreign_table, $foreign_primary, $primary )        {        $this->joins['right'][] = array('foreign_table' => "`".$this->getPrefix().$foreign_table."`",                                        'foreign_primary' => "`".$this->getPrefix().$foreign_table."`.`".$foreign_primary."`",                                        'primary' => "`".$this->getPrefix().$this->getTable()."`.`".$primary."`");        $this->temporaly_prefix = $this->temporaly_table = NULL;        return $this;        }        /*    * @param string    * @param string    * @param string    * @return object this    */    public function innerJoin( $foreign_table, $foreign_primary, $primary )        {        $this->joins['inner'][] = array('foreign_table' => "`".$this->getPrefix().$foreign_table."`",                                        'foreign_primary' => "`".$this->getPrefix().$foreign_table."`.`".$foreign_primary."`",                                        'primary' => "`".$this->getPrefix().$this->getTable()."`.`".$primary."`");        $this->temporaly_prefix = $this->temporaly_table = NULL;        return $this;        }        /*    * build query and call exQuery()    */    public function fetch()        {        $sql = "SELECT";        $sql .=  $this->generateSelect();        $sql .= "FROM `".$this->getPrefix().$this->getTable()."`";        $sql .= $this->generateJoin('inner').$this->generateJoin('left').$this->generateJoin('right');        $sql .= $this->generateWhere();        $sql .= $this->group_by.$this->order_by.$this->limit;        return $this->exQuery( $sql );        }        /*    * @variation 1    *  @param string field    *  @param string/int value    *   @usage where(...)->update('field', 'value', ...);    * @variation 2    *  @param string primary_field    *  @param string/int primary_value    *  @param string field    *  @param string/int value    *   @usage update('id', 12, 'lastlogin', 'NOW()', 'lastip', 'localhost');    * @variation 3    *  @param array primaries    *  @param string field    *  @param string/int value    *   @usage update( array('id'=>12, '!username'=>'test'), 'lastlogin', 'NOW()', 'lastip', 'localhost')    * @return int affected rows number    */    public function update( /**/ )        {        $args = func_get_args();        $pref = $this->getPrefix();        $table = $this->getTable();        if( !count($this->where) )            {            if( is_array($args[0]) )                {                $this->where($args[0]);                $args = array_slice($args, 1);                }else{                $this->where($args[0], $args[1]);                $args = array_slice($args, 2);                }            }        $this->usePrefix($pref)->useTable($table);        $sets = array();        for( $i=0;$i<count($args);$i++ )            {            $sets[] = "`".$this->getPrefix().$this->getTable()."`=".(is_numeric($args[$i+1])?(int)$args[$i+1]:"'".$args[$i+1]."'");            $i++;            }        $sql = "UPDATE `".$this->getPrefix().$this->getTable()."` SET ".implode(", ", $sets).$this->generateWhere();        $this->exQuery($sql);        return $this->connection->affected_rows;        }        /*    * @variation 1    *  @param array fields    *  @param array values    *   @usage insert( array(username, password), array('lol', 'lol2') )    * @variation 2    *  @param string field    *  @param string/int value    *   @usage insert('username', 'lol', 'password', 'lol2');    * @return int lastInsertId    */    public function insert( /**/ )        {        $args = func_get_args();        $fields = array();        $values = array();        if( is_array($args[0]) && count($args) == 1 )            {            foreach( $args[0] as $field => $value )                {                $fields[] = $field;                $values[] = $value;                }            }        if( is_array($args[0]) && count($args) == 2 )            {                $fields = $args[0];                $values = $args[1];            }        if( is_string($args[1]) )            {            for( $i=0;$i<count($args);$i++ )                {                $fields[] = $args[$i];                $values[] = $args[$i+1];                $i++;                }            }        array_walk($fields, function($val, $key) use(&$array){                                 $array[$key] = "`".$val."`";                                });        array_walk($values, function($val, $key) use(&$array){                                 $array[$key] = (is_numeric($val)?(int)$val:"'".$val."'");                                });        $sql = "INSERT INTO `".$this->getPrefix().$this->getTable()."` (".implode(", ", $fields).") VALUES (".implode(", ",$values).")";        $this->exQuery($sql);        return $this->connection->insert_id;        }        private function getPrefix()        {        if( isset($this->temporaly_prefix) )            return $this->temporaly_prefix;        return $this->prefix;        }            private function getTable()        {        if( isset($this->temporaly_table) )            return $this->temporaly_table;        return $this->table;        }        private function generateSelect()        {        if( count($this->select) )            {            $select_array = array();            foreach( $this->select as $select )                if( $select['field_name'] == '*' )                    $select_array[] = '*';                else                    $select_array[] = $select['field_name']." AS ".$select['alias'];            return " ".implode(", ", $select_array)." ";            }        return ' * ';        }        private function generateJoin( $join )        {        if( array_key_exists( $join, $this->joins ) && count($this->joins[$join])  )            {            $join_array = array();            foreach($this->joins[$join] as $r_join)                $join_array[] = strtoupper($join)." JOIN ".$r_join['foreign_table']." ON ".$r_join['primary']."=".$r_join['foreign_primary'];            return " ".implode(" ", $join_array);            }        return '';        }            private function generateWhere()        {        if( count($this->where) )            {            $wheres = array();            foreach($this->where as $where)                $wheres[] = $where['before_tag']." ".$where['field_name'].$where['operator'].$where['value'];            return " WHERE".implode(" ", $wheres);            }        return '';        }}